{
  "name": "repeat",
  "version": "0.0.6",
  "description": "Repeat.js is a javascript library that makes working with repeated actions pure joy by removing the need for setTimeout/setInterval and somewhat error prone timer references",
  "homepage": "https://github.com/bjoerge/repeat.js",
  "author": {
    "name": "Bjørge Næss",
    "email": "bjoerge@gmail.com"
  },
  "keywords": [
    "Repetition",
    "Repeat",
    "Timed",
    "Timer",
    "setInterval",
    "setTimeout",
    "clearTimeout",
    "asyncronous",
    "promise",
    "deferred"
  ],
  "dependencies": {
    "dfrrd": "latest"
  },
  "devDependencies": {
    "mocha": "latest",
    "expect.js": "latest",
    "jquery": "git://github.com/bjoerge/jquery-node.git#v1.8.0",
    "jsdom": "latest",
    "coffee-script": "latest",
    "moment": "latest",
    "uglify-js": "latest",
    "sinon": "latest",
    "jshint": "latest",
    "node-minify": "latest"
  },
  "scripts": {
    "test": "make test",
    "test-browser": "./node_modules/.bin/browserify -r expect.js -o tmp/browser.js -e extra/browser.coffee;coffee -o ./tmp -c ./test;open test/browser.html"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/bjoerge/repeat.js.git"
  },
  "bugs": {
    "url": "https://github.com/bjoerge/repeat.js/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "<pre>\n ____                                     __\n/\\  _`\\                                  /\\ \\__       __\n\\ \\ \\L\\ \\     __   _____      __     __  \\ \\ ,_\\     /\\_\\    ____\n \\ \\ ,  /   /'__`\\/\\ '__`\\  /'__`\\ /'__`\\ \\ \\ \\/     \\/\\ \\  /',__\\\n  \\ \\ \\\\ \\ /\\  __/\\ \\ \\L\\ \\/\\  __//\\ \\L\\.\\_\\ \\ \\_  __ \\ \\ \\/\\__, `\\\n   \\ \\_\\ \\_\\ \\____\\\\ \\ ,__/\\ \\____\\ \\__/.\\_\\\\ \\__\\/\\_\\_\\ \\ \\/\\____/\n    \\/_/\\/ /\\/____/ \\ \\ \\/  \\/____/\\/__/\\/_/ \\/__/\\/_/\\ \\_\\ \\/___/\n                     \\ \\_\\                           \\ \\____/\n                      \\/_/                            \\/___/\n\nTimed actions in JavaScript simplified\n</pre>\n\n[![Build Status](https://secure.travis-ci.org/bjoerge/repeat.js.png)](http://travis-ci.org/bjoerge/repeat.js)\n\n# Summary\nRepeat.js is a tiny (< 2kb minified and gzipped) javascript library for timing function calls.\n\n- It abstracts away the need for dealing with setTimeout and setInterval, and the somewhat error prone timer and interval IDs\n\n- It provides an simple, intuitive and flexible chained api.\n\n- It is ideal for polling, performing asynchronous updates, doing timed UI updates or executing expensive tasks asynchronously .\n\n- It can be used standalone or with jQuery.\n\n- It is built on top of a Deferred/promise implemetation for even greater flexibility\n\n- It is tested in IE 7-9, Firefox 10, Chrome 16, Safari 5.1 and Opera 11.61.\n\n## Examples\n\n### Basic example\n```javascript\nfunction sayHello() {\n  console.log(\"Hello world!\");\n};\n\nRepeat(sayHello).every(500, 'ms').for(2, 'minutes').start.in(5, 'sec');\n// -> Now wait for 5 seconds and keep a watchful eye on the javascript console\n```\n\n### Live display of relative time with jQuery and moment.js\n\n```javascript\njQuery(function() {\n  (function mockDOM() { // This is just for creating some example DOM elements\n    var ul = jQuery(\"<ul></ul>\"), now = (new Date().getTime()), elem_count = 100;\n    while (elem_count--) {;\n      ul.append(jQuery('<li class=\"live-time\" data-timestamp=\"'+\n         (now+(Math.random()*100000)*(Math.random() > 0.5 ? -1 : 1)) +\n        '\"></li>'))\n    }\n    ul.appendTo(jQuery(\"body\")); \n  }());\n\n  var elems = jQuery(\".live-time\");\n  Repeat(function() {\n    elems.each(function(i, elem) {\n      elem = jQuery(elem);\n      var time = moment(elem.data(\"timestamp\"));\n      elem.html('Displaying '+ time.format(\"dddd, MMMM Do YYYY, h:mm:ss a\") +' as \"<b>'+ time.fromNow()+'</b>\"');\n    });\n  }).every(1000, 'ms').start.now();\n});\n```\n\n### Asynchronous polling with jQuery \n\nPolling a server every second, but wait for the request to complete before proceeding\n\n```javascript\n\nRepeat(function(done) {\n         jQuery.ajax({\n           url: 'http://www.example.com',\n           success: function(data) {console.log(data);},\n           complete: function() {\n             done(); // will wait for this to be called before continuing\n           }\n         });\n       })\n       .every(1000, 'ms')\n       .for(2, 'minutes')\n       .start.in(3, 'secs');\n```\n\n### Monitoring changes in an objects' state with console.monitor\n\nAdd a function to the console object, that allows for monitoring a property of any object.\n\n```javascript\nconsole.monitor = function(object, property) {\n  var last_value = object[property];\n  return Repeat(function() {\n    var current_value = object[property];\n    if (last_value !== current_value) {\n      console.log('Property changed from \"'+last_value+'\" to \"'+current_value+'\"!');\n      last_value = current_value;\n    }\n    else {\n      console.log(\"No change\");\n    }\n  });\n};\n\nvar myObject = {someProperty: \"Something\"};\nconsole.monitor(myObject, 'someProperty').every(500, 'ms').for(10, 'seconds').start();\nsetTimeout(function() {myObject.someProperty = \"Changed value\"}, 3000);\n```\n\n### Execute expensive operations asynchronously\nA common trick in order to keep the UI responsive while executing expensive operations\nis to split up the parts of the operation into smaller subtasks that can be executed asynchronously using timers.\n\nThe illustrating example from Nicholas C. Zakas' High Performance Javascript (loc. 3215) could be rewritten like this:\n\n```javascript\nfunction saveDocument(id) {\n  var tasks = [openDocument, writeText, closeDocument, updateUI]; // these are the expensive functions\n  return Repeat(function() {\n      var task = tasks.shift();\n      task(id);\n    })\n    .async().until(function() {\n      return tasks.length == 0;\n    }).start.now();        \n}\n```\n\n# Promise support\nThe functions `start()` `now()` `in()` and `wait()` will all return a read-only [Promise](http://en.wikipedia.org/wiki/Futures_and_promises) instance.\n\n- If used with jQuery, it will return an instance of jQuery's [Promise](http://api.jquery.com/Types/#Promise).\n- If used standalone, a [minimalistic](https://github.com/bjoerge/dfrrd.js) implementation of the CommonJS [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) spec will be used.\n\nBasic example:\n\n```javascript\nRepeat(function() { console.log(\"W00t\"); })\n  .every(1, 's')\n  .for(20, 's')\n  .start.now()\n  .then(function() {\n    console.log(\"I'm done w00t'n\");\n  });\n```\n\n## Error handling and promise callbacks\n\n- Any errors thrown in the task function will cause the promise to be rejected with the error object as value\n- The promise's progress listeners be notified after each task invocation with the returned value as parameter\n- When done, the promise will be resolved with an array of the tasks return value for each invocation\n\nThe following example illustrates use of success/progress/error listeners:\n\n```javascript\nvar onSuccess = function(results) {\n  console.log(\"All good\", results);\n};\nvar onFailure = function(exception) {\n  console.error(\"Error\", exception);\n};\nvar onProgress = function(result) {\n  console.log(\"Progress: \", result);\n};\nRepeat(function() {\n        var v = Math.random();\n        if (v > 0.8) throw new Error(\"Ouch!\");\n        return v;\n    })\n  .every(1, 's')\n  .for(10, 's')\n  .start()\n  .then(onSuccess, onFailure, onProgress);\n```\n\nIf used standalone or with jQuery, the promise object also provides more convenient `progress` and `fail` functions for adding callbacks in separate steps.\nAdditionaly, there's also an `always` method to add callback functions for whenever the promise is either resolved or rejected.\n\nThe above example using the jQuery or standalone version could be written like this:\n\n```javascript\nvar repeat = Repeat(function() {\n        var v = Math.random();\n        if (v > 0.8) throw new Error(\"Ouch!\");\n        return v;\n    })\n  .every(1, 's')\n  .for(5, 's')\n  .start();\n\nrepeat.then(function() { console.log('Resolved!'); });\nrepeat.fail(function() { console.log('Rejected!'); });\nrepeat.always(function() { console.log('Done! (either resolved or rejected)'); });\n```\n\n## Compatibility notes\n\n- If you are targeting older browsers, you probably want to use any of the ECMAScript 5 polyfill libraries\nlisted here: https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills (in particular\n [ddr-ecma5](http://code.google.com/p/ddr-ecma5/), [augmentjs](http://augmentjs.com/) or\n  [es5-shim](https://github.com/kriskowal/es5-shim/))\n\n- Some older browsers and environments (IE 6 - 8) doesn't support using reserved words\nas property names (and may throw an error when referencing functions like \"for\", \"while\" and \"in\"),\nRepeat.js offers alternative function names for code targeted for such environments:\n\n  - `for`   => `lasting`\n  - `while` => `during`\n  - `in`    => `wait`\n  - `if`    => `provided`\n\nExample:\n\n```javascript\nRepeat(function() {\n  console.log(\"I'm safe\");\n })\n .every(2, 'sec')\n .lasting(2, 'min')                                   // lasting instead of for\n .during(function() { return Math.random() > .5; })   // during instead of while\n .provided(function() { return Math.random() > .5; }) // provided instead of if\n .wait(5, 'sec');                                     // wait instead of in\n```\n\nAnother less readable (and not recommended) workaround would be to reference these methods using bracket notation:\n\n```javascript\nRepeat(function() { console.log(\"Hello\"); })\n.every(2, 's')\n['for'](2, 'm')\n['if'](function() { return Math.random() > .5; })\n['while'](function() {  return Math.random() > .5; })\n['in'](5, 's');\n```\n\n# License\nCopyright (C) 2012 Bjørge Næss\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "_id": "repeat@0.0.6",
  "dist": {
    "shasum": "6c9d8133eb8ceaf8e380f06c69b51417b7cb0e8d",
    "tarball": "https://registry.npmjs.org/repeat/-/repeat-0.0.6.tgz"
  },
  "_npmVersion": "1.1.62",
  "_npmUser": {
    "name": "bjoerge",
    "email": "bjoerge@gmail.com"
  },
  "maintainers": [
    {
      "name": "bjoerge",
      "email": "bjoerge@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "6c9d8133eb8ceaf8e380f06c69b51417b7cb0e8d",
  "_resolved": "https://registry.npmjs.org/repeat/-/repeat-0.0.6.tgz",
  "_from": "repeat@latest"
}
